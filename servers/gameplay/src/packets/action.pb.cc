// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: action.proto

#include "action.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_action_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_action_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_User_Vector2;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_action_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_User;
}  // namespace protobuf_action_2eproto
namespace gameplay {
class User_Vector2DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<User_Vector2>
      _instance;
} _User_Vector2_default_instance_;
class UserDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<User>
      _instance;
} _User_default_instance_;
class ActionPacketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActionPacket>
      _instance;
} _ActionPacket_default_instance_;
class BroadCastPacketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BroadCastPacket>
      _instance;
} _BroadCastPacket_default_instance_;
}  // namespace gameplay
namespace protobuf_action_2eproto {
static void InitDefaultsUser_Vector2() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameplay::_User_Vector2_default_instance_;
    new (ptr) ::gameplay::User_Vector2();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameplay::User_Vector2::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_User_Vector2 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUser_Vector2}, {}};

static void InitDefaultsUser() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameplay::_User_default_instance_;
    new (ptr) ::gameplay::User();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameplay::User::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_User =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUser}, {
      &protobuf_action_2eproto::scc_info_User_Vector2.base,}};

static void InitDefaultsActionPacket() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameplay::_ActionPacket_default_instance_;
    new (ptr) ::gameplay::ActionPacket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameplay::ActionPacket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ActionPacket =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsActionPacket}, {}};

static void InitDefaultsBroadCastPacket() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameplay::_BroadCastPacket_default_instance_;
    new (ptr) ::gameplay::BroadCastPacket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameplay::BroadCastPacket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BroadCastPacket =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBroadCastPacket}, {
      &protobuf_action_2eproto::scc_info_User.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_User_Vector2.base);
  ::google::protobuf::internal::InitSCC(&scc_info_User.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActionPacket.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BroadCastPacket.base);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gameplay::User_Vector2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gameplay::User_Vector2, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gameplay::User_Vector2, y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gameplay::User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gameplay::User, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gameplay::User, health_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gameplay::User, position_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gameplay::ActionPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gameplay::ActionPacket, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gameplay::ActionPacket, radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gameplay::ActionPacket, is_attack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gameplay::ActionPacket, is_move_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gameplay::ActionPacket, send_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gameplay::BroadCastPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gameplay::BroadCastPacket, you_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gameplay::BroadCastPacket, other_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gameplay::User_Vector2)},
  { 7, -1, sizeof(::gameplay::User)},
  { 15, -1, sizeof(::gameplay::ActionPacket)},
  { 25, -1, sizeof(::gameplay::BroadCastPacket)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gameplay::_User_Vector2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gameplay::_User_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gameplay::_ActionPacket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gameplay::_BroadCastPacket_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "action.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014action.proto\022\010gameplay\"u\n\004User\022\022\n\nsess"
      "ion_id\030\001 \001(\005\022\016\n\006health\030\002 \001(\005\022(\n\010position"
      "\030\003 \001(\0132\026.gameplay.User.Vector2\032\037\n\007Vector"
      "2\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\"i\n\014ActionPacket\022"
      "\022\n\nsession_id\030\001 \001(\005\022\016\n\006radius\030\002 \001(\002\022\021\n\ti"
      "s_attack\030\003 \001(\010\022\017\n\007is_move\030\004 \001(\010\022\021\n\tsend_"
      "time\030\005 \001(\002\"M\n\017BroadCastPacket\022\033\n\003you\030\001 \001"
      "(\0132\016.gameplay.User\022\035\n\005other\030\002 \001(\0132\016.game"
      "play.Userb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 337);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "action.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_action_2eproto
namespace gameplay {

// ===================================================================

void User_Vector2::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int User_Vector2::kXFieldNumber;
const int User_Vector2::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

User_Vector2::User_Vector2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_action_2eproto::scc_info_User_Vector2.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameplay.User.Vector2)
}
User_Vector2::User_Vector2(const User_Vector2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:gameplay.User.Vector2)
}

void User_Vector2::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

User_Vector2::~User_Vector2() {
  // @@protoc_insertion_point(destructor:gameplay.User.Vector2)
  SharedDtor();
}

void User_Vector2::SharedDtor() {
}

void User_Vector2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* User_Vector2::descriptor() {
  ::protobuf_action_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_action_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const User_Vector2& User_Vector2::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_action_2eproto::scc_info_User_Vector2.base);
  return *internal_default_instance();
}


void User_Vector2::Clear() {
// @@protoc_insertion_point(message_clear_start:gameplay.User.Vector2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

bool User_Vector2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gameplay.User.Vector2)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gameplay.User.Vector2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gameplay.User.Vector2)
  return false;
#undef DO_
}

void User_Vector2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gameplay.User.Vector2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gameplay.User.Vector2)
}

::google::protobuf::uint8* User_Vector2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gameplay.User.Vector2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameplay.User.Vector2)
  return target;
}

size_t User_Vector2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameplay.User.Vector2)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void User_Vector2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameplay.User.Vector2)
  GOOGLE_DCHECK_NE(&from, this);
  const User_Vector2* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const User_Vector2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameplay.User.Vector2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameplay.User.Vector2)
    MergeFrom(*source);
  }
}

void User_Vector2::MergeFrom(const User_Vector2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameplay.User.Vector2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void User_Vector2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameplay.User.Vector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User_Vector2::CopyFrom(const User_Vector2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameplay.User.Vector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User_Vector2::IsInitialized() const {
  return true;
}

void User_Vector2::Swap(User_Vector2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void User_Vector2::InternalSwap(User_Vector2* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata User_Vector2::GetMetadata() const {
  protobuf_action_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_action_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void User::InitAsDefaultInstance() {
  ::gameplay::_User_default_instance_._instance.get_mutable()->position_ = const_cast< ::gameplay::User_Vector2*>(
      ::gameplay::User_Vector2::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int User::kSessionIdFieldNumber;
const int User::kHealthFieldNumber;
const int User::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

User::User()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_action_2eproto::scc_info_User.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameplay.User)
}
User::User(const User& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::gameplay::User_Vector2(*from.position_);
  } else {
    position_ = NULL;
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&health_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(health_));
  // @@protoc_insertion_point(copy_constructor:gameplay.User)
}

void User::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&health_) -
      reinterpret_cast<char*>(&position_)) + sizeof(health_));
}

User::~User() {
  // @@protoc_insertion_point(destructor:gameplay.User)
  SharedDtor();
}

void User::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void User::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* User::descriptor() {
  ::protobuf_action_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_action_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const User& User::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_action_2eproto::scc_info_User.base);
  return *internal_default_instance();
}


void User::Clear() {
// @@protoc_insertion_point(message_clear_start:gameplay.User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&health_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(health_));
  _internal_metadata_.Clear();
}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gameplay.User)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 session_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 health = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gameplay.User.Vector2 position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gameplay.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gameplay.User)
  return false;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gameplay.User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 session_id = 1;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->session_id(), output);
  }

  // int32 health = 2;
  if (this->health() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->health(), output);
  }

  // .gameplay.User.Vector2 position = 3;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_position(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gameplay.User)
}

::google::protobuf::uint8* User::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gameplay.User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 session_id = 1;
  if (this->session_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->session_id(), target);
  }

  // int32 health = 2;
  if (this->health() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->health(), target);
  }

  // .gameplay.User.Vector2 position = 3;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_position(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameplay.User)
  return target;
}

size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameplay.User)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gameplay.User.Vector2 position = 3;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int32 session_id = 1;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->session_id());
  }

  // int32 health = 2;
  if (this->health() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->health());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void User::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameplay.User)
  GOOGLE_DCHECK_NE(&from, this);
  const User* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const User>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameplay.User)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameplay.User)
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameplay.User)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::gameplay::User_Vector2::MergeFrom(from.position());
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
  if (from.health() != 0) {
    set_health(from.health());
  }
}

void User::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameplay.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameplay.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  return true;
}

void User::Swap(User* other) {
  if (other == this) return;
  InternalSwap(other);
}
void User::InternalSwap(User* other) {
  using std::swap;
  swap(position_, other->position_);
  swap(session_id_, other->session_id_);
  swap(health_, other->health_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata User::GetMetadata() const {
  protobuf_action_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_action_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActionPacket::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionPacket::kSessionIdFieldNumber;
const int ActionPacket::kRadiusFieldNumber;
const int ActionPacket::kIsAttackFieldNumber;
const int ActionPacket::kIsMoveFieldNumber;
const int ActionPacket::kSendTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionPacket::ActionPacket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_action_2eproto::scc_info_ActionPacket.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameplay.ActionPacket)
}
ActionPacket::ActionPacket(const ActionPacket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&send_time_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(send_time_));
  // @@protoc_insertion_point(copy_constructor:gameplay.ActionPacket)
}

void ActionPacket::SharedCtor() {
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_time_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(send_time_));
}

ActionPacket::~ActionPacket() {
  // @@protoc_insertion_point(destructor:gameplay.ActionPacket)
  SharedDtor();
}

void ActionPacket::SharedDtor() {
}

void ActionPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActionPacket::descriptor() {
  ::protobuf_action_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_action_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActionPacket& ActionPacket::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_action_2eproto::scc_info_ActionPacket.base);
  return *internal_default_instance();
}


void ActionPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:gameplay.ActionPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_time_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(send_time_));
  _internal_metadata_.Clear();
}

bool ActionPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gameplay.ActionPacket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 session_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float radius = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_attack = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_attack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_move = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_move_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float send_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &send_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gameplay.ActionPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gameplay.ActionPacket)
  return false;
#undef DO_
}

void ActionPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gameplay.ActionPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 session_id = 1;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->session_id(), output);
  }

  // float radius = 2;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->radius(), output);
  }

  // bool is_attack = 3;
  if (this->is_attack() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_attack(), output);
  }

  // bool is_move = 4;
  if (this->is_move() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_move(), output);
  }

  // float send_time = 5;
  if (this->send_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->send_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gameplay.ActionPacket)
}

::google::protobuf::uint8* ActionPacket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gameplay.ActionPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 session_id = 1;
  if (this->session_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->session_id(), target);
  }

  // float radius = 2;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->radius(), target);
  }

  // bool is_attack = 3;
  if (this->is_attack() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_attack(), target);
  }

  // bool is_move = 4;
  if (this->is_move() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_move(), target);
  }

  // float send_time = 5;
  if (this->send_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->send_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameplay.ActionPacket)
  return target;
}

size_t ActionPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameplay.ActionPacket)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 session_id = 1;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->session_id());
  }

  // float radius = 2;
  if (this->radius() != 0) {
    total_size += 1 + 4;
  }

  // bool is_attack = 3;
  if (this->is_attack() != 0) {
    total_size += 1 + 1;
  }

  // bool is_move = 4;
  if (this->is_move() != 0) {
    total_size += 1 + 1;
  }

  // float send_time = 5;
  if (this->send_time() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionPacket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameplay.ActionPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionPacket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionPacket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameplay.ActionPacket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameplay.ActionPacket)
    MergeFrom(*source);
  }
}

void ActionPacket::MergeFrom(const ActionPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameplay.ActionPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
  if (from.is_attack() != 0) {
    set_is_attack(from.is_attack());
  }
  if (from.is_move() != 0) {
    set_is_move(from.is_move());
  }
  if (from.send_time() != 0) {
    set_send_time(from.send_time());
  }
}

void ActionPacket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameplay.ActionPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionPacket::CopyFrom(const ActionPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameplay.ActionPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionPacket::IsInitialized() const {
  return true;
}

void ActionPacket::Swap(ActionPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionPacket::InternalSwap(ActionPacket* other) {
  using std::swap;
  swap(session_id_, other->session_id_);
  swap(radius_, other->radius_);
  swap(is_attack_, other->is_attack_);
  swap(is_move_, other->is_move_);
  swap(send_time_, other->send_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActionPacket::GetMetadata() const {
  protobuf_action_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_action_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BroadCastPacket::InitAsDefaultInstance() {
  ::gameplay::_BroadCastPacket_default_instance_._instance.get_mutable()->you_ = const_cast< ::gameplay::User*>(
      ::gameplay::User::internal_default_instance());
  ::gameplay::_BroadCastPacket_default_instance_._instance.get_mutable()->other_ = const_cast< ::gameplay::User*>(
      ::gameplay::User::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BroadCastPacket::kYouFieldNumber;
const int BroadCastPacket::kOtherFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BroadCastPacket::BroadCastPacket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_action_2eproto::scc_info_BroadCastPacket.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameplay.BroadCastPacket)
}
BroadCastPacket::BroadCastPacket(const BroadCastPacket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_you()) {
    you_ = new ::gameplay::User(*from.you_);
  } else {
    you_ = NULL;
  }
  if (from.has_other()) {
    other_ = new ::gameplay::User(*from.other_);
  } else {
    other_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gameplay.BroadCastPacket)
}

void BroadCastPacket::SharedCtor() {
  ::memset(&you_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&other_) -
      reinterpret_cast<char*>(&you_)) + sizeof(other_));
}

BroadCastPacket::~BroadCastPacket() {
  // @@protoc_insertion_point(destructor:gameplay.BroadCastPacket)
  SharedDtor();
}

void BroadCastPacket::SharedDtor() {
  if (this != internal_default_instance()) delete you_;
  if (this != internal_default_instance()) delete other_;
}

void BroadCastPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BroadCastPacket::descriptor() {
  ::protobuf_action_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_action_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BroadCastPacket& BroadCastPacket::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_action_2eproto::scc_info_BroadCastPacket.base);
  return *internal_default_instance();
}


void BroadCastPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:gameplay.BroadCastPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && you_ != NULL) {
    delete you_;
  }
  you_ = NULL;
  if (GetArenaNoVirtual() == NULL && other_ != NULL) {
    delete other_;
  }
  other_ = NULL;
  _internal_metadata_.Clear();
}

bool BroadCastPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gameplay.BroadCastPacket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gameplay.User you = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_you()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gameplay.User other = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_other()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gameplay.BroadCastPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gameplay.BroadCastPacket)
  return false;
#undef DO_
}

void BroadCastPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gameplay.BroadCastPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gameplay.User you = 1;
  if (this->has_you()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_you(), output);
  }

  // .gameplay.User other = 2;
  if (this->has_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_other(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gameplay.BroadCastPacket)
}

::google::protobuf::uint8* BroadCastPacket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gameplay.BroadCastPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gameplay.User you = 1;
  if (this->has_you()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_you(), deterministic, target);
  }

  // .gameplay.User other = 2;
  if (this->has_other()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_other(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameplay.BroadCastPacket)
  return target;
}

size_t BroadCastPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameplay.BroadCastPacket)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gameplay.User you = 1;
  if (this->has_you()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *you_);
  }

  // .gameplay.User other = 2;
  if (this->has_other()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *other_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BroadCastPacket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameplay.BroadCastPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const BroadCastPacket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BroadCastPacket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameplay.BroadCastPacket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameplay.BroadCastPacket)
    MergeFrom(*source);
  }
}

void BroadCastPacket::MergeFrom(const BroadCastPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameplay.BroadCastPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_you()) {
    mutable_you()->::gameplay::User::MergeFrom(from.you());
  }
  if (from.has_other()) {
    mutable_other()->::gameplay::User::MergeFrom(from.other());
  }
}

void BroadCastPacket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameplay.BroadCastPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadCastPacket::CopyFrom(const BroadCastPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameplay.BroadCastPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadCastPacket::IsInitialized() const {
  return true;
}

void BroadCastPacket::Swap(BroadCastPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BroadCastPacket::InternalSwap(BroadCastPacket* other) {
  using std::swap;
  swap(you_, other->you_);
  swap(other_, other->other_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BroadCastPacket::GetMetadata() const {
  protobuf_action_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_action_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gameplay
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gameplay::User_Vector2* Arena::CreateMaybeMessage< ::gameplay::User_Vector2 >(Arena* arena) {
  return Arena::CreateInternal< ::gameplay::User_Vector2 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gameplay::User* Arena::CreateMaybeMessage< ::gameplay::User >(Arena* arena) {
  return Arena::CreateInternal< ::gameplay::User >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gameplay::ActionPacket* Arena::CreateMaybeMessage< ::gameplay::ActionPacket >(Arena* arena) {
  return Arena::CreateInternal< ::gameplay::ActionPacket >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gameplay::BroadCastPacket* Arena::CreateMaybeMessage< ::gameplay::BroadCastPacket >(Arena* arena) {
  return Arena::CreateInternal< ::gameplay::BroadCastPacket >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
