// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: action.proto

#ifndef PROTOBUF_INCLUDED_action_2eproto
#define PROTOBUF_INCLUDED_action_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_action_2eproto 

namespace protobuf_action_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_action_2eproto
namespace gameplay {
class ActionPacket;
class ActionPacketDefaultTypeInternal;
extern ActionPacketDefaultTypeInternal _ActionPacket_default_instance_;
class BroadCastPacket;
class BroadCastPacketDefaultTypeInternal;
extern BroadCastPacketDefaultTypeInternal _BroadCastPacket_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class User_Vector2;
class User_Vector2DefaultTypeInternal;
extern User_Vector2DefaultTypeInternal _User_Vector2_default_instance_;
}  // namespace gameplay
namespace google {
namespace protobuf {
template<> ::gameplay::ActionPacket* Arena::CreateMaybeMessage<::gameplay::ActionPacket>(Arena*);
template<> ::gameplay::BroadCastPacket* Arena::CreateMaybeMessage<::gameplay::BroadCastPacket>(Arena*);
template<> ::gameplay::User* Arena::CreateMaybeMessage<::gameplay::User>(Arena*);
template<> ::gameplay::User_Vector2* Arena::CreateMaybeMessage<::gameplay::User_Vector2>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gameplay {

// ===================================================================

class User_Vector2 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gameplay.User.Vector2) */ {
 public:
  User_Vector2();
  virtual ~User_Vector2();

  User_Vector2(const User_Vector2& from);

  inline User_Vector2& operator=(const User_Vector2& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  User_Vector2(User_Vector2&& from) noexcept
    : User_Vector2() {
    *this = ::std::move(from);
  }

  inline User_Vector2& operator=(User_Vector2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const User_Vector2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User_Vector2* internal_default_instance() {
    return reinterpret_cast<const User_Vector2*>(
               &_User_Vector2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(User_Vector2* other);
  friend void swap(User_Vector2& a, User_Vector2& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline User_Vector2* New() const final {
    return CreateMaybeMessage<User_Vector2>(NULL);
  }

  User_Vector2* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<User_Vector2>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const User_Vector2& from);
  void MergeFrom(const User_Vector2& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User_Vector2* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gameplay.User.Vector2)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_action_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class User : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gameplay.User) */ {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(User&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(User* other);
  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(NULL);
  }

  User* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef User_Vector2 Vector2;

  // accessors -------------------------------------------------------

  // .gameplay.User.Vector2 position = 3;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 3;
  private:
  const ::gameplay::User_Vector2& _internal_position() const;
  public:
  const ::gameplay::User_Vector2& position() const;
  ::gameplay::User_Vector2* release_position();
  ::gameplay::User_Vector2* mutable_position();
  void set_allocated_position(::gameplay::User_Vector2* position);

  // int32 session_id = 1;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // int32 health = 2;
  void clear_health();
  static const int kHealthFieldNumber = 2;
  ::google::protobuf::int32 health() const;
  void set_health(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gameplay.User)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gameplay::User_Vector2* position_;
  ::google::protobuf::int32 session_id_;
  ::google::protobuf::int32 health_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_action_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ActionPacket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gameplay.ActionPacket) */ {
 public:
  ActionPacket();
  virtual ~ActionPacket();

  ActionPacket(const ActionPacket& from);

  inline ActionPacket& operator=(const ActionPacket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ActionPacket(ActionPacket&& from) noexcept
    : ActionPacket() {
    *this = ::std::move(from);
  }

  inline ActionPacket& operator=(ActionPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActionPacket* internal_default_instance() {
    return reinterpret_cast<const ActionPacket*>(
               &_ActionPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ActionPacket* other);
  friend void swap(ActionPacket& a, ActionPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActionPacket* New() const final {
    return CreateMaybeMessage<ActionPacket>(NULL);
  }

  ActionPacket* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ActionPacket>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ActionPacket& from);
  void MergeFrom(const ActionPacket& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionPacket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 session_id = 1;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // float radius = 2;
  void clear_radius();
  static const int kRadiusFieldNumber = 2;
  float radius() const;
  void set_radius(float value);

  // bool is_attack = 3;
  void clear_is_attack();
  static const int kIsAttackFieldNumber = 3;
  bool is_attack() const;
  void set_is_attack(bool value);

  // bool is_move = 4;
  void clear_is_move();
  static const int kIsMoveFieldNumber = 4;
  bool is_move() const;
  void set_is_move(bool value);

  // float send_time = 5;
  void clear_send_time();
  static const int kSendTimeFieldNumber = 5;
  float send_time() const;
  void set_send_time(float value);

  // @@protoc_insertion_point(class_scope:gameplay.ActionPacket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 session_id_;
  float radius_;
  bool is_attack_;
  bool is_move_;
  float send_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_action_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BroadCastPacket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gameplay.BroadCastPacket) */ {
 public:
  BroadCastPacket();
  virtual ~BroadCastPacket();

  BroadCastPacket(const BroadCastPacket& from);

  inline BroadCastPacket& operator=(const BroadCastPacket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BroadCastPacket(BroadCastPacket&& from) noexcept
    : BroadCastPacket() {
    *this = ::std::move(from);
  }

  inline BroadCastPacket& operator=(BroadCastPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BroadCastPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BroadCastPacket* internal_default_instance() {
    return reinterpret_cast<const BroadCastPacket*>(
               &_BroadCastPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(BroadCastPacket* other);
  friend void swap(BroadCastPacket& a, BroadCastPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BroadCastPacket* New() const final {
    return CreateMaybeMessage<BroadCastPacket>(NULL);
  }

  BroadCastPacket* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BroadCastPacket>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BroadCastPacket& from);
  void MergeFrom(const BroadCastPacket& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadCastPacket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gameplay.User you = 1;
  bool has_you() const;
  void clear_you();
  static const int kYouFieldNumber = 1;
  private:
  const ::gameplay::User& _internal_you() const;
  public:
  const ::gameplay::User& you() const;
  ::gameplay::User* release_you();
  ::gameplay::User* mutable_you();
  void set_allocated_you(::gameplay::User* you);

  // .gameplay.User other = 2;
  bool has_other() const;
  void clear_other();
  static const int kOtherFieldNumber = 2;
  private:
  const ::gameplay::User& _internal_other() const;
  public:
  const ::gameplay::User& other() const;
  ::gameplay::User* release_other();
  ::gameplay::User* mutable_other();
  void set_allocated_other(::gameplay::User* other);

  // @@protoc_insertion_point(class_scope:gameplay.BroadCastPacket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gameplay::User* you_;
  ::gameplay::User* other_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_action_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// User_Vector2

// int32 x = 1;
inline void User_Vector2::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 User_Vector2::x() const {
  // @@protoc_insertion_point(field_get:gameplay.User.Vector2.x)
  return x_;
}
inline void User_Vector2::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:gameplay.User.Vector2.x)
}

// int32 y = 2;
inline void User_Vector2::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 User_Vector2::y() const {
  // @@protoc_insertion_point(field_get:gameplay.User.Vector2.y)
  return y_;
}
inline void User_Vector2::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:gameplay.User.Vector2.y)
}

// -------------------------------------------------------------------

// User

// int32 session_id = 1;
inline void User::clear_session_id() {
  session_id_ = 0;
}
inline ::google::protobuf::int32 User::session_id() const {
  // @@protoc_insertion_point(field_get:gameplay.User.session_id)
  return session_id_;
}
inline void User::set_session_id(::google::protobuf::int32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:gameplay.User.session_id)
}

// int32 health = 2;
inline void User::clear_health() {
  health_ = 0;
}
inline ::google::protobuf::int32 User::health() const {
  // @@protoc_insertion_point(field_get:gameplay.User.health)
  return health_;
}
inline void User::set_health(::google::protobuf::int32 value) {
  
  health_ = value;
  // @@protoc_insertion_point(field_set:gameplay.User.health)
}

// .gameplay.User.Vector2 position = 3;
inline bool User::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline void User::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
inline const ::gameplay::User_Vector2& User::_internal_position() const {
  return *position_;
}
inline const ::gameplay::User_Vector2& User::position() const {
  const ::gameplay::User_Vector2* p = position_;
  // @@protoc_insertion_point(field_get:gameplay.User.position)
  return p != NULL ? *p : *reinterpret_cast<const ::gameplay::User_Vector2*>(
      &::gameplay::_User_Vector2_default_instance_);
}
inline ::gameplay::User_Vector2* User::release_position() {
  // @@protoc_insertion_point(field_release:gameplay.User.position)
  
  ::gameplay::User_Vector2* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::gameplay::User_Vector2* User::mutable_position() {
  
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::gameplay::User_Vector2>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gameplay.User.position)
  return position_;
}
inline void User::set_allocated_position(::gameplay::User_Vector2* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete position_;
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:gameplay.User.position)
}

// -------------------------------------------------------------------

// ActionPacket

// int32 session_id = 1;
inline void ActionPacket::clear_session_id() {
  session_id_ = 0;
}
inline ::google::protobuf::int32 ActionPacket::session_id() const {
  // @@protoc_insertion_point(field_get:gameplay.ActionPacket.session_id)
  return session_id_;
}
inline void ActionPacket::set_session_id(::google::protobuf::int32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:gameplay.ActionPacket.session_id)
}

// float radius = 2;
inline void ActionPacket::clear_radius() {
  radius_ = 0;
}
inline float ActionPacket::radius() const {
  // @@protoc_insertion_point(field_get:gameplay.ActionPacket.radius)
  return radius_;
}
inline void ActionPacket::set_radius(float value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:gameplay.ActionPacket.radius)
}

// bool is_attack = 3;
inline void ActionPacket::clear_is_attack() {
  is_attack_ = false;
}
inline bool ActionPacket::is_attack() const {
  // @@protoc_insertion_point(field_get:gameplay.ActionPacket.is_attack)
  return is_attack_;
}
inline void ActionPacket::set_is_attack(bool value) {
  
  is_attack_ = value;
  // @@protoc_insertion_point(field_set:gameplay.ActionPacket.is_attack)
}

// bool is_move = 4;
inline void ActionPacket::clear_is_move() {
  is_move_ = false;
}
inline bool ActionPacket::is_move() const {
  // @@protoc_insertion_point(field_get:gameplay.ActionPacket.is_move)
  return is_move_;
}
inline void ActionPacket::set_is_move(bool value) {
  
  is_move_ = value;
  // @@protoc_insertion_point(field_set:gameplay.ActionPacket.is_move)
}

// float send_time = 5;
inline void ActionPacket::clear_send_time() {
  send_time_ = 0;
}
inline float ActionPacket::send_time() const {
  // @@protoc_insertion_point(field_get:gameplay.ActionPacket.send_time)
  return send_time_;
}
inline void ActionPacket::set_send_time(float value) {
  
  send_time_ = value;
  // @@protoc_insertion_point(field_set:gameplay.ActionPacket.send_time)
}

// -------------------------------------------------------------------

// BroadCastPacket

// .gameplay.User you = 1;
inline bool BroadCastPacket::has_you() const {
  return this != internal_default_instance() && you_ != NULL;
}
inline void BroadCastPacket::clear_you() {
  if (GetArenaNoVirtual() == NULL && you_ != NULL) {
    delete you_;
  }
  you_ = NULL;
}
inline const ::gameplay::User& BroadCastPacket::_internal_you() const {
  return *you_;
}
inline const ::gameplay::User& BroadCastPacket::you() const {
  const ::gameplay::User* p = you_;
  // @@protoc_insertion_point(field_get:gameplay.BroadCastPacket.you)
  return p != NULL ? *p : *reinterpret_cast<const ::gameplay::User*>(
      &::gameplay::_User_default_instance_);
}
inline ::gameplay::User* BroadCastPacket::release_you() {
  // @@protoc_insertion_point(field_release:gameplay.BroadCastPacket.you)
  
  ::gameplay::User* temp = you_;
  you_ = NULL;
  return temp;
}
inline ::gameplay::User* BroadCastPacket::mutable_you() {
  
  if (you_ == NULL) {
    auto* p = CreateMaybeMessage<::gameplay::User>(GetArenaNoVirtual());
    you_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gameplay.BroadCastPacket.you)
  return you_;
}
inline void BroadCastPacket::set_allocated_you(::gameplay::User* you) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete you_;
  }
  if (you) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      you = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, you, submessage_arena);
    }
    
  } else {
    
  }
  you_ = you;
  // @@protoc_insertion_point(field_set_allocated:gameplay.BroadCastPacket.you)
}

// .gameplay.User other = 2;
inline bool BroadCastPacket::has_other() const {
  return this != internal_default_instance() && other_ != NULL;
}
inline void BroadCastPacket::clear_other() {
  if (GetArenaNoVirtual() == NULL && other_ != NULL) {
    delete other_;
  }
  other_ = NULL;
}
inline const ::gameplay::User& BroadCastPacket::_internal_other() const {
  return *other_;
}
inline const ::gameplay::User& BroadCastPacket::other() const {
  const ::gameplay::User* p = other_;
  // @@protoc_insertion_point(field_get:gameplay.BroadCastPacket.other)
  return p != NULL ? *p : *reinterpret_cast<const ::gameplay::User*>(
      &::gameplay::_User_default_instance_);
}
inline ::gameplay::User* BroadCastPacket::release_other() {
  // @@protoc_insertion_point(field_release:gameplay.BroadCastPacket.other)
  
  ::gameplay::User* temp = other_;
  other_ = NULL;
  return temp;
}
inline ::gameplay::User* BroadCastPacket::mutable_other() {
  
  if (other_ == NULL) {
    auto* p = CreateMaybeMessage<::gameplay::User>(GetArenaNoVirtual());
    other_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gameplay.BroadCastPacket.other)
  return other_;
}
inline void BroadCastPacket::set_allocated_other(::gameplay::User* other) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete other_;
  }
  if (other) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      other = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, other, submessage_arena);
    }
    
  } else {
    
  }
  other_ = other;
  // @@protoc_insertion_point(field_set_allocated:gameplay.BroadCastPacket.other)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gameplay

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_action_2eproto
